{"name":"Gettext.js","tagline":"gettext.js is a lightweight yet complete and accurate GNU gettext port for node and the browser.","body":"# gettext.js\r\n\r\ngettext.js is a lightweight (3k minified!) yet complete and accurate GNU\r\ngettext port for node and the browser. Manage your i18n translations the right\r\nway in your javascript projects.\r\n\r\n\r\n## Why another i18n javascript library?\r\n\r\ngettext.js aim is to port the famous GNU gettext and ngettext functions to\r\njavascript node and browser applications.\r\nIt should be standards respectful and lightweight (no dictionary loading\r\nmanagement, no extra features).\r\n\r\nThe result is a < 200 lines javascript tiny lib yet implementing fully\r\n`gettext()` and `ngettext()` and having the lighter json translation files\r\npossible (embeding only translated forms, and not much headers).\r\n\r\nThere are plenty good i18n libraries out there, notably\r\n[Jed](https://github.com/SlexAxton/Jed) and [i18n-next](http://i18next.com/),\r\nbut either there are too complex and too heavy, or they do not embrace fully\r\nthe gettext API and philosophy.\r\n\r\nThere is also [gettext.js](https://github.com/Orange-OpenSource/gettext.js)\r\nwhich is pretty good and heavily inspired this one, but not active since 2012\r\nand without any tests.\r\n\r\n\r\n## Installation\r\n\r\n### Node\r\n\r\nInstall the lib with the following command: `npm install gettext.js --save`\r\n\r\nRequire it in your project:\r\n\r\n```javascript\r\nvar i18n = require('gettext.js');\r\ni18n.gettext('foo');\r\n```\r\n\r\n### Browser\r\n\r\nDownload the latest\r\n[archive](https://github.com/guillaumepotier/gettext.js/archive/master.zip) or\r\nget it through bower: `bower install gettext.js --save`\r\n\r\n```html\r\n<script src=\"/path/to/gettext.js\" type=\"text/javascript\"></script>\r\n<script>\r\n  var i18n = window.i18n(options);\r\n  i18n.gettext('foo');\r\n</script>\r\n```\r\n\r\n## Usage\r\n\r\n### Load your messages\r\n\r\nYou can load your messages these ways:\r\n\r\n```javascript\r\n// i18n.setMessages(domain, locale, messages, plural_form);\r\ni18n.setMessages('messages', 'fr', {\r\n  \"Welcome\": \"Bienvenue\",\r\n  \"There is %1 apple\": [\r\n    \"Il y a %1 pomme\",\r\n    \"Il y a %1 pommes\"\r\n  ]\r\n}, 'nplurals=2; plural=n>1;');\r\n```\r\n\r\n```javascript\r\n// i18n.loadJSON(jsonData /*, domain */);\r\nvar json = {\r\n  \"\": {\r\n    \"locale\": \"fr\",\r\n    \"plural-forms\": \"nplurals=2; plural=n>1;\"\r\n  }\r\n  \"Welcome\": \"Bienvenue\",\r\n  \"There is %1 apple\": [\r\n    \"Il y a %1 pomme\",\r\n    \"Il y a %1 pommes\"\r\n  ]\r\n};\r\ni18n.loadJSON(jsonData, 'messages');\r\n```\r\n\r\nSee Required JSON format section below for more info.\r\n\r\n\r\n### Set the locale\r\n\r\nYou could do it from your dom\r\n\r\n```html\r\n<html lang=\"fr\">\r\n```\r\n\r\nor from javascript\r\n\r\n```javascript\r\ni18n.setLocate('fr');\r\n```\r\n\r\n\r\n### `gettext(msgid)`\r\n\r\nTranslate a string.\r\n\r\n\r\n### `ngettext(msgid, msgid_plural, n)`\r\n\r\nTranslate a pluralizable string\r\n\r\n\r\n### Variabilized strings\r\n\r\n`gettext('There are %1 in the %2`, 'apples', 'bowl'); -> \"There are apples in the bowl`\r\n`ngettext('One %2', '%1 %2', 10, 'bananas'); -> \"10 bananas\"`\r\n\r\nIt uses the public method `i18n.strfmt(\"string\", var1, var2, ...)` you could\r\nreuse elsewhere in your project.\r\n\r\n\r\n## Required JSON format\r\n\r\nYou'll find in `/bin` a `po2json.js` converter, based on the excellent\r\n[po2json](https://github.com/mikeedwards/po2json) project that will dump your\r\n`.po` files into the proper json format below:\r\n\r\n```json\r\n{\r\n    \"\": {\r\n        \"lang\": \"en\",\r\n        \"plural_forms\": \"nplurals=2; plural=(n!=1);\"\r\n    },\r\n    \"simple key\": \"It's tranlation\",\r\n    \"another with %1 parameter\": \"It's %1 tranlsation\",\r\n    \"a key with plural\": [\r\n        \"a plural form\",\r\n        \"another plural form\",\r\n        \"could have up to 6 forms with some languages\"\r\n    ],\r\n    \"a context\\u0004a contextualized key\": \"translation here\"\r\n}\r\n```\r\n\r\nUse `bin/po2json.js input.po output.json` or\r\n`bin/po2json.js input.po output.json -p` for pretty format.\r\n\r\n\r\n## Parsers\r\n\r\nYou could use [xgettext-php](https://github.com/Wisembly/xgettext-php) parser\r\nto parse your files. It provides helpful javascript and handlebars parsers.\r\n\r\n\r\n## License\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}